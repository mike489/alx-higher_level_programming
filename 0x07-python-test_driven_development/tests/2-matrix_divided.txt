
==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [3, 6, 9],
    ...     [12, 15, 18]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Note that quotients are rounded to a maximum of two decimaix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
       Traceback (most recent call last):
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
ix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
   r: matrix must be a matrix (list of     TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

2-matrix_divided.txt[+] [unix] (19:49 29/07/2022)                      142,4 81%
-- INSERT --
r: matrix must be a matrix (list of     TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6
